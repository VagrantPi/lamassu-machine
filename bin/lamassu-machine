#!/usr/bin/env node

'use strict'

Error.stackTraceLimit = 50

// TODO: go through code and take out all evil throws
require('../lib/logging')

const db = require('../lib/storage/settings/db')
var minimist = require('minimist')
var Brain = require('../lib/brain')
var Configuration = require('../lib/configuration.js')
let scanner = null

var bailed = false
var brain = null

function bail (err) {
  if (bailed) return
  bailed = true
  console.log('lamassu-machine bailing out momentarily...')
  console.log(err)
  if (err.stack) console.log(err.stack)
  setTimeout(function () {
    console.log('lamassu-machine bailing out')
    process.exit(10)
  }, 7000) // Leave some time to connect for browser to set error screen
}

function startBrain () {
  db.migrate.latest().then(() => {
    console.log('Database migration complete')

    var commandLine = minimist(process.argv.slice(2))

    var config = Configuration.loadConfig(commandLine)

    brain = new Brain(config)

    const isGenmegaMachine = config.cryptomatMaker === 'genmega'
    scanner = config.mockCam
      ? require('../lib/mocks/scanner')
      : require(`../lib/${isGenmegaMachine ? 'scanner-genmega' : 'scanner'}`)

    brain.on('error', bail)
    brain.run()
  }).catch(err => {
    console.error('Database migration failed')
    console.error(err)
    process.exit(1)
  })
}

process.on('uncaughtException', err => {
  if (err.code === 'EPIPE') {
    if (brain) brain.epipeLogs()
    console.trace(err)
    return
  }
  bail(err)
})
process.on('unhandledRejection', console.log)
process.on('exit', function () {
  if (scanner) scanner.cancel()
  console.log('lamassu-machine exiting')
})

process.on('SIGTERM', () => process.exit())
process.on('SIGINT', () => process.exit())

startBrain()
